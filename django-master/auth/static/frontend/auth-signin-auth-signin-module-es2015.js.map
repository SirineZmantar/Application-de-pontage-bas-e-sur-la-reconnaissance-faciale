{"version":3,"sources":["./src/app/demo/pages/authentication/auth-signin/auth-signin.component.html","./src/app/demo/pages/authentication/auth-signin/auth-signin-routing.module.ts","./src/app/demo/pages/authentication/auth-signin/auth-signin.component.scss","./src/app/demo/pages/authentication/auth-signin/auth-signin.component.ts","./src/app/demo/pages/authentication/auth-signin/auth-signin.module.ts","./src/app/demo/pages/authentication/auth-signin/user.service.ts"],"names":[],"mappings":"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","file":"auth-signin-auth-signin-module-es2015.js","sourcesContent":["module.exports = \"<div class=\\\"auth-wrapper\\\">\\n  <div class=\\\"auth-content\\\">\\n    <div class=\\\"card\\\">\\n      <div class=\\\"row align-items-center text-center\\\">\\n        <div class=\\\"col-md-12\\\">\\n          <div class=\\\"card-body\\\">\\n           \\n            <h4 class=\\\"mb-3 f-w-400\\\" Style=\\\"Color:teal\\\">Se Connecter</h4>\\n            <div class=\\\"input-group mb-3\\\">\\n              <div class=\\\"input-group-prepend\\\">\\n                <div class=\\\"row\\\" *ngIf=\\\"!_userService.token\\\"></div>\\n                <span class=\\\"input-group-text\\\"><i class=\\\"feather icon-mail\\\"></i></span>\\n              </div>\\n              <input [(ngModel)]=\\\"user.email\\\" type=\\\"email\\\" class=\\\"form-control\\\" placeholder=\\\"adresse e-mail\\\">\\n            </div>\\n            <span *ngFor=\\\"let error of _userService.errors.email\\\"><br />\\n              {{ error }}</span></div>\\n            <div class=\\\"input-group mb-4\\\">\\n              <div class=\\\"input-group-prepend\\\">\\n                <span class=\\\"input-group-text\\\"><i class=\\\"feather icon-lock\\\"></i></span>\\n              </div>\\n              <input [(ngModel)]=\\\"user.password\\\" type=\\\"password\\\" class=\\\"form-control\\\" placeholder=\\\"mot de passe\\\">\\n            </div>\\n            <span *ngFor=\\\"let error of _userService.errors.password\\\"><br />\\n              {{ error }}</span>\\n            <div class=\\\"form-group text-left mt-2\\\">\\n            </div>\\n            <button (click)=\\\"login()\\\" class=\\\"btn btn-block mb-4\\\" style=\\\"background-color:teal;color: white \\\" >Connexion</button>\\n            <p class=\\\"mb-2 text-muted\\\">Mot de passe oublié? <a [routerLink]=\\\"['/auth/reset-password']\\\" class=\\\"f-w-400\\\">Réinitialiser</a></p>\\n            <div class=\\\"col-sm-12\\\">\\n              <span *ngFor=\\\"let error of _userService.errors.non_field_errors\\\">{{ error }}<br /></span>\\n            </div>\\n          </div>\\n          <div class=\\\"row\\\" *ngIf=\\\"_userService.token\\\">\\n            <div class=\\\"col-sm-12\\\">You are logged in as {{ _userService.username }}.<br />\\n              Token Expires: {{ _userService.token_expires }}<br />\\n              <button (click)=\\\"refreshToken()\\\" class=\\\"btn btn-primary\\\">Refresh Token</button>\\n              <button (click)=\\\"logout()\\\" class=\\\"btn btn-primary\\\">Log Out</button>\\n            </div>\\n          </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport {AuthSigninComponent} from './auth-signin.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AuthSigninComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AuthSigninRoutingModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2RlbW8vcGFnZXMvYXV0aGVudGljYXRpb24vYXV0aC1zaWduaW4vYXV0aC1zaWduaW4uY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport {UserService} from './user.service';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport {throwError} from 'rxjs';\n\n// Other imports\nimport { TestBed } from '@angular/core/testing';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\n@Component({\n  selector: 'app-auth-signin',\n  templateUrl: './auth-signin.component.html',\n  styleUrls: ['./auth-signin.component.scss'],\n  providers : [UserService]\n})\nexport class AuthSigninComponent implements OnInit {\n  public user: any;\n \n  constructor(private _userService: UserService) { }\n  ngOnInit() {\n    this.user = {\n      email: '',\n      password: ''\n    };\n  }\n \n  login() {\n    this._userService.login({'email': this.user.email, 'password': this.user.password});\n  }\n \n  refreshToken() {\n    this._userService.refreshToken();\n  }\n \n  logout() {\n    this._userService.logout();\n  }\n \n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n\nimport { AuthSigninRoutingModule } from './auth-signin-routing.module';\nimport { AuthSigninComponent } from './auth-signin.component';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    AuthSigninRoutingModule,\n    FormsModule,\n  ],\n  declarations: [AuthSigninComponent]\n})\nexport class AuthSigninModule { }\n","import {Injectable} from '@angular/core';\r\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\r\n \r\n@Injectable()\r\nexport class UserService {\r\n \r\n  // http options used for making API calls\r\n  private httpOptions: any;\r\n \r\n  // the actual JWT token\r\n  public token: string;\r\n \r\n  // the token expiration date\r\n  public token_expires: Date;\r\n \r\n  // the username of the logged in user\r\n  public username: string;\r\n \r\n  // error messages received from the login attempt\r\n  public errors: any = [];\r\n \r\n  constructor(private http: HttpClient) {\r\n    this.httpOptions = {\r\n      headers: new HttpHeaders({'Content-Type': 'application/json'})\r\n    };\r\n  }\r\n \r\n  // Uses http.post() to get an auth token from djangorestframework-jwt endpoint\r\n  public login(user) {\r\n    this.http.post('/api-token-auth/', JSON.stringify(user), this.httpOptions).subscribe(\r\n      data => {\r\n        this.updateData(data['token']);\r\n      },\r\n      err => {\r\n        this.errors = err['error'];\r\n      }\r\n    );\r\n  }\r\n \r\n  // Refreshes the JWT token, to extend the time the user is logged in\r\n  public refreshToken() {\r\n    this.http.post('/api-token-refresh/', JSON.stringify({token: this.token}), this.httpOptions).subscribe(\r\n      data => {\r\n        this.updateData(data['token']);\r\n      },\r\n      err => {\r\n        this.errors = err['error'];\r\n      }\r\n    );\r\n  }\r\n \r\n  public logout() {\r\n    this.token = null;\r\n    this.token_expires = null;\r\n    this.username = null;\r\n  }\r\n \r\n  private updateData(token) {\r\n    this.token = token;\r\n    this.errors = [];\r\n \r\n    // decode the token to read the username and expiration timestamp\r\n    const token_parts = this.token.split(/\\./);\r\n    const token_decoded = JSON.parse(window.atob(token_parts[1]));\r\n    this.token_expires = new Date(token_decoded.exp * 1000);\r\n    this.username = token_decoded.username;\r\n\r\n    console.log(token_decoded);\r\n  }\r\n \r\n}"],"sourceRoot":""}